#!/usr/bin/env node
var path   = require('path');
var script = path.basename(__filename);

var errorFile = process.argv[2];
if (!errorFile) {
  console.error('Usage: ./' + script + ' path/to/errmsg-utf8.txt');
  process.exit(1);
}

var fs     = require('fs');
var errors = fs.readFileSync(errorFile, 'utf-8');

var targetFile = path.join(__dirname, '../lib/protocol/constants/errors.js');
var offset     = Number(errors.match(/start-error-number (\d+)/)[1]);
var codes      = errors.match(/^([A-Z_]+)/mg).map(fixupCode);
var stream     = fs.createWriteStream(targetFile);
var alignment  = codes.reduce(maxLength, 0);

stream.write('// Generated by ' + script + ', do not modify by hand\n');

for (var i = 0; i < codes.length; i++) {
  stream.write('exports.' + codes[i] + (new Array(alignment - codes[i].length + 1)).join(' ') + ' = ' + (offset + i) + ';\n');
}

stream.write('\n// Lookup-by-number table\n');

for (var i = 0; i < codes.length; i++) {
  stream.write('exports[' + (offset + i) + '] = \'' + codes[i] + '\';\n');
}

console.log('Wrote constants to ' + targetFile);

function fixupCode(code) {
  return code
  // remove obsolete markers
  .replace('ER_OBSOLETE_', 'ER_')
  // remove unused markers
  .replace(/_(?:OLD)?_UNUSED$/, '');
}

function maxLength(max, value) {
  return Math.max(max, value.length);
}
